{"pages":[{"title":"GTA Orange Python Module","text":"This is the documentation of the official Python module for the GTA Orange dedicated server. It allows you to code your resources in Python instead of LUA, allowing you to use the advantages of (C)Python, like the feature-rich built-in implementations and the endless list of packages contributed by the community. And once you tried it and saw some meaningful and beautiful error tracebacks, there is no way back to LUA - trust us! :-D To get started, we recommend you to read the tutorial series. It teaches you how to use the module and its API as fast as possible. Of course, the reference can also be very helpful, but please note that the API is completely documented in-file with Python docstrings. So, if you use some kind of IDE, it may be faster to just have a look at the source code. Tutorials: Beginner Download &amp; Install Hello World Event Handling Intermediate Client-Server Communication MySQL Example Thread Example Using Global Interpreters More may come soon! If you've wishes, just contact Hexaflexagon or Jonniboy on Discord. Useful links: Python website Python 3 docs Python tutorial on Tutorialspoint","tags":"","url":"index.html"},{"title":"Getting Started","text":"To start with the Python module and the included Python modules you can use in your Python resources to control GTA, we recommend to read the following series of short tutorials. They will show you how to install the module, how to create a Python resource and how to script with our API. If you've an idea how it works, you can use the Library Reference which you can find in the menu at the left. Tutorials: Beginner Download &amp; Install Hello World Event Handling Intermediate Client-Server Communication MySQL Example Thread Example Using Global Interpreters More may come soon! If you've wishes, just contact Hexaflexagon or Jonniboy on Discord. Useful links: Lua website Lua tutorial Lua docs","tags":"","url":"Getting_Started\/index.html"},{"title":"Download & Install","text":"Downloading and installing the Python module and its API Windows installation Download the zip file from GitHub with the master branch. That is probably the best way to get the newest version. Unpack the zip file with your favourite program. No program? Just download 7-Zip or IZArc. Copy the content of the unzipped folder (the modules and resources directory) to your server's root directory (where your config file and the executable can be found). It's done! Now you can put Python resources into the resources folder and add their names to the config file, just as you would do in LUA. Linux installation You need either Python 3.4, 3.5 or 3.6 installed on your Linux system. Maybe you've already the right Python installation. Check it by using the python --version in the shell. If you have one of the versions above, you already have the right version - then skip the next point and go on with part 3. Now you've two options. 2.1 Installing Python 3.4\/3.5\/3.6 with a community-driven repository from J Fernyhough by following this post on Askubuntu.com would be the easier option. 2.2 Installing Python 3.4\/3.5\/3.6 through building it with Pyenv by following this post on Askubuntu.com is probably the cleaner option from these two. Once your Python installation is ready, rename the pythonXX-module.so named with your Python version (python --version) to python-module.so and delete\/move the other ones, so the module does not load multiple times. Ready to start the server now! There is a demo resource, which can be used for testing the functionality. Pro tips You can find the API, which is some kind of wrapper around the GTA Orange server natives, in .\/python-module\/GTAOrange. Just open a file and you will find documented code, which will help you to achieve what you want. Use PEP8 with camelCased function &amp; method names. This is the preferred code style here. (Python docs too long? Here is a cheat sheet for you.) Before you ask something in the forums or on Discord, please have a look at the reference pages. You can find some nice examples there, which may solve your problem automatically. If your project scale rises, you may split your code into different Python files. You can easily import them with import NAME_WITHOUT_.PY. Also think about multiple resources - there is nothing wrong with that, and you can import each others resource instance to communicate easily. You've heard of Sublime Text and Anaconda, right? And now? We recommend to read the rest of the tutorials. Good luck &amp; have fun with coding! If you experience problems, have a look into the references, ask in the forums or on Discord. If there is a problem, we will solve it, and if there's a bug, we will fix it.","tags":"","url":"Getting_Started\/Download_&_Install.html"},{"title":"Hello World","text":"Let's start with a simple Hello World, to contribute to the traditions. Resource Creation At first, you need to create your resource. This is easily done by adding a folder to the resources directory, and adding a resource.yml file to it with the following content: type: python The entry point of your resource will always be __init__.py which is also in the root of your newly created resource directory. So, everything in this file will be executed by the Python interpreter, and from there you can import every other file you need. Hello World Moving on, let's create our __init__.py. Just create a new file with this name. Now script your first resource. For a really basic resource, you need to import a library (in Python it's usually called module, but we name it like that to avoid confusion with the Python module itself). For example, you can import the player library to use it later like this: import GTAOrange.player as Player Of course you can name it like you prefer, or even use no module alias. A good alternative is _player. Why we don't name it player, you may ask? Because it easily happens that you name a passed function parameter player, and that would overwrite or collide with the module then. Then, you can use all the global functions which you can find in the Library Reference, for example getByID() which is included in almost every library. For example, we will get a player with the id &quot;0&quot; now and send him a fancy chat message. Please note that this only really works in combination with event handling, since the code you see executes directly when the resource starts. So the following example is just for educational purpose. # get the player object by its id player = Player.getByID(0) # send a message by calling an object method of player player.chatMsg(&quot;{c800c8} Hello World!&quot;) Object Attributes And now, you have to be very strong. Python is really object oriented, not like LUA! That's why you can use the advantages of it here as well. For example, you can add own attributes and methods to the player objects, which will remain as long as the player is connected and is shared between all Python resources. This is the same for other objects as well. You just need to be careful about the names: do not overwrite any attributes or object methods! This will surely break something in the API! # new attribute for player score, useful for racing scripts etc. player.score = 300 # new attribute containing a method You may prefix your own attributes with something to avoid overwriting. Let's say your role play server is named &quot;Bla Bli Role Play&quot;, it definitely makes sense to prefix your attributes with something rememberable like player.blabli_score.","tags":"","url":"Getting_Started\/Hello_World.html"},{"title":"Event Handling","text":"Let's have a look at event handling, since this is probably one of the most important things you want to use. At first, it is necessary to know that every event is sorted into its own library. Like &quot;connect&quot;, &quot;command&quot;, &quot;disconnect&quot; is made available in the Player libary, and &quot;playerentered&quot;, &quot;playerleft&quot;, ... in Vehicle library. It may be some kind of confusing, but its pros just top the cons, like it's very near to the LUA library from GTA Orange which makes switching to Python easier. Also a library is only loaded when it is really used in a resource, and the event system only works for loaded library, which may or may not reduce the resource usage later for very simple servers. Okay, now let us simply try to register an own event handler, it will be almost self explaining. # import Player library import GTAOrange.player as Player # define new function which will be used for event handling def onPlayerConnect(player, ip): # send chat message to player by calling a method of the player object, which you got from the passed arguments of this function player.chatMsg(&quot;Welcome to this server! Have fun!&quot;) # register your function, so the Python module knows it needs to call the function on the connect event Player.on(&quot;connect&quot;, onPlayerConnect) Easy, right? Now, let me explain another detail. There is &quot;global&quot; and &quot;object-local&quot; event handling. That's why the on function is available in the library you use, but in the objects too. For example, you have on as a function in Player library, and the on method in a Player object as well. What is the difference, you may ask? Well, for example, when you subscribe to the &quot;command&quot; event from the Player library on a &quot;global&quot; basis, everytime a player sends a command, your specified function will be called. It doesn't matter what player it is. But when you subscribe to the &quot;command&quot; event &quot;player-locally&quot;, your function only gets called if a specified player sends a command. Now, here is an example which is meant to be as practical as possible. It was hard to find something, since the scripting functionality is some kind of limited at the moment. There will be a better example sometime, I promise. import GTAOrange.player as Player import GTAOrange.hash as Hash def onAdminPressedKey(player, key_id): if key_id == Hash.Key.NUMPAD9: player.setPosition(0, 0, 70) # or your super secret position def onPlayerConnect(player, ip): player.chatMsg(&quot;Welcome to this server! Have fun!&quot;) # this is just an example, never trust a name!!! this could be a check for admin rights with your own admin system if player.getName() == &quot;Jonniboy&quot;: # subribing &quot;player-local&quot; player.on(&quot;pressedkey&quot;, onAdminPressedKey) # register your function, so the Python module knows it needs to call the function on the connect event Player.on(&quot;connect&quot;, onPlayerConnect) So, instead of calling the onAdminPressedKey function everytime a player pressed a key, it only gets called if this one player pressed a key from the event system.","tags":"","url":"Getting_Started\/Event_Handling.html"},{"title":"Client Server Communication","text":"Client to server and server to client communication is possible in Python, but at the moment there is no way to have Python scripts on the client side. That's why your client scripts can only be written in LUA, and you can use your server-side Python resource to communicate with it. So unfortunately you will have to learn how to write LUA resources as well. The way you communicate is nearly the same as in LUA. You can fire events on the client side within your server resource, and clients can fire events which call back to the server as well. How is it in LUA? I never used it! You've your resources on the server. You add client scripts by calling AddClientScript(&quot;bla.lua&quot;). Then the server automatically brings up the scripts on every client connecting to the server. One problem So, the problem is, that there is no way to actually use the command mentioned above in Python due to internal compilation of LUA scripts and so on. Not important for us at this point. That's why if you want to add your own client scripts communicating with Python resources, you may need to create a LUA resource just to add your client scripts. For example, let's say you've a Python resource named &quot;superrace&quot;, which will be the #1 superb racing mod, but you want to add LUA client scripts. Then you have to create a LUA resource, like &quot;superrace-client&quot;, to write and add your client scripts. Server-To-Client (Python server-side -&gt; LUA client-side) Example which fires a client-side event when a player connects Main Python resource server-side (__init__.py) import GTAOrange.player as Player def onPlayerConnect(player, ip): player.chatMsg(&quot;Welcome to this server! Have fun!&quot;) player.triggerClient(&quot;myEventName&quot;, player.getID(), player.getName()) Player.on(&quot;connect&quot;, onPlayerConnect) Second LUA &quot;helper&quot; resource server-side (main.lua) AddClientScript(&quot;client.lua&quot;) Client script in your LUA resource folder (client.lua) Server:On(&quot;myEventName&quot;, function(id, name) -- do something on the client side, using the passed arguments -- e.g. playing around with natives or draw something cool print(&quot;My event got fired!&quot;) print(&quot;(&quot; .. id .. &quot;) &quot; .. name) end) Client-To-Server (LUA client-side -&gt; Python server-side) Example which fires a server-side event from the client side every 10 seconds Main Python resource server-side (__init__.py) import GTAOrange.player as Player def onClientEvent(player, event_name, string): if event_name == &quot;myEventName&quot;: print(player.getName() + &quot; fired my event! His message to you is: &quot; + string) Player.on(&quot;clientevent&quot;, onClientEvent) Second LUA &quot;helper&quot; resource server-side (main.lua) AddClientScript(&quot;client.lua&quot;) Client script in your LUA resource folder (client.lua) Thread:new(function() local msg = &quot;My fancy message&quot; Server:Trigger(&quot;myEventName&quot;, msg) Thread:Wait(10000) end) Conclusion So, since you can use the natives of GTA 5, you can literally build any feature you need into it with a lot of effort. But the scripting API evolves everytime, so try to use as many functions of GTA Orange as possible. For what you could use this feature possibly? displaying stuff by drawing it client-side with GTA 5 natives menus with buttons and input fields later managing CEF &amp; so on ...","tags":"","url":"Getting_Started\/Client_Server_Communication.html"},{"title":"MySQL Example","text":"There are plenty of MySQL or other database modules for Python. You can use all of them, especially when you use a global Python installation instead of the built-in solution. We will not explain how you can set up a MySQL server or anything like that. Just use one of the many tutorials out there on the internet. Some nice Python modules are: MySQL MySQLdb - easy to use MySQL library, already included in our Python Module PyMySQL - like a pure Python version of MySQLdb SQLAlchemy - ORM system, supports threading Non-MySQL MongoDB - NoSQL key value storage (tutorial coming soon\u00e2\u0084\u00a2) Redis - in-memory storage, probably difficult for beginners We will use MySQLdb in this example, which has a lot of tutorials written by the community already. It's very easy to use, already included in the Python Module and pretty &quot;low-level&quot; when compared to all the ORM stuff out there. But please feel free to use whatever you want. If you want to continue using MySQLdb, Zetcode provides a fancy one (and masses of others) here. Example code # import our database module import MySQLdb as mdb import GTAOrange.player as Player connection = None cursor = None def init(): global connection global cursor # initiating our database connection connection = mdb.connect(&quot;localhost&quot;, &quot;youruser&quot;, &quot;yourpw&quot;, &quot;yourdb&quot;) # there are multiple cursor types, DictCursor means that the results are returned as a dictionary # if you leave the arguments blank, results will be automatically returned as lists cursor = connection.cursor(mdb.cursors.DictCursor) def onPlayerConnect(player, ip): player.chatMsg(&quot;Welcome to this server! Have fun!&quot;) # -&gt; never ever trust a name! this is just for demonstration purposes, create your own login system with passwords please # -&gt; always think about escaping things, to not let SQL injections happen - the code below shows to let it automatically escape variables cursor.execute(&quot;SELECT * FROM players WHERE name = %s;&quot;, [player.getName()]) if cursor.rowcount &gt; 0: data = cursor.fetchone() player.setModel(data[&quot;skin&quot;]) player.setHealth(data[&quot;health&quot;]) player.setArmour(data[&quot;armour&quot;]) # ... else: print(&quot;Player &quot; + player.getName() + &quot; not found in database! What should we do now? You may find your own way for this! Little hint: you can execute every SQL command you want this way.&quot;) Player.on(&quot;connect&quot;, onPlayerConnect) init() This is actually a working example. If you want to learn by testing it, use the following SQL dump for your database: -- phpMyAdmin SQL Dump -- version 4.6.5.2 -- https:\/\/www.phpmyadmin.net\/ -- -- Host: 127.0.0.1 -- Generation Time: May 30, 2017 at 10:27 PM -- Server version: 10.1.21-MariaDB -- PHP Version: 5.6.30 SET SQL_MODE = &quot;NO_AUTO_VALUE_ON_ZERO&quot;; SET time_zone = &quot;+00:00&quot;; -- -- Database: `gtao_example` -- -- -------------------------------------------------------- -- -- Table structure for table `players` -- CREATE TABLE `players` ( `id` int(11) NOT NULL, `name` tinytext COLLATE utf8_unicode_ci NOT NULL, `skin` int(11) NOT NULL, `health` float NOT NULL, `armour` float NOT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci; -- -- Dumping data for table `players` -- INSERT INTO `players` (`id`, `name`, `skin`, `health`, `armour`) VALUES (1, 'Jonniboy', -1688898956, 77, 77); -- -- Indexes for dumped tables -- -- -- Indexes for table `players` -- ALTER TABLE `players` ADD PRIMARY KEY (`id`); -- -- AUTO_INCREMENT for dumped tables -- -- -- AUTO_INCREMENT for table `players` -- ALTER TABLE `players` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;","tags":"","url":"Getting_Started\/MySQL_Example.html"},{"title":"Threading Example","text":"Python's native threads just work fine! And that's why there is no extra library as in LUA. There are a lot of tutorials out there, that's why here is just a short example code block. Some tutorials: Python 3 Docs - maybe hard to understand for beginners, but the most up-to-date and informative site Python-Course.eu - from beginning to end, please be warned because it might not be up-to-date especially their locks example Tutorialspoint.com - pretty straight-forward Example code import time from threading import Thread def _threadTest(): while True: time.sleep(1000) t = Thread(target=_threadTest) t.daemon = True # run in background t.start() Side note If you need more examples and\/or help, feel free to request or ask for help on the Discord.","tags":"","url":"Getting_Started\/Threading_Example.html"},{"title":"Hash Library","text":"The hash library is a special library included in our Python GTA Orange API, which was written to improve the process of converting object hashes into their string equivalents or the other way around. It consists of hash &quot;containers&quot;, databases which store information about which hash is related to which string. Available hash containers Key - hexadecimal key identifiers (used for &quot;pressedkey&quot; event) Vehicle - vehicle hashes VehicleColor - vehicle colors Weapon - weapon hashes (&quot;WEAPON_&quot; prefix) Gadget - gadget hashes (you could say they're weapons too, but they have no &quot;WEAPON_&quot; prefix) VehicleWeapon - vehicle weapon hashes (&quot;VEHICLE_WEAPON_&quot; prefix) Explosive - explosive hashes Object - object hashes (placeable things, like ramps and decorations and so on) Some libraries have to be loaded manually At the moment, only the Object database isn't going to be loaded automatically, since the list is very long and it isn't needed to load it into memory if you're not using it. If you want to use it please note that you've to call loadHashContainer(&quot;Object&quot;) before you can use it properly. String to Hash Example #1: Simple Weapon Script import GTAOrange.player as Player import GTAOrange.hash as Hash def onPlayerCommand(player, command): command = command.split() if command[0] == &quot;\/givegun&quot;: weapon = Hash.Weapon.WEAPON_PISTOL # uppercase pseudo constants # sanity check if weapon is not None: player.giveWeapon(weapon) else: print(' '.join(command)) return True Player.on(&quot;command&quot;, onPlayerCommand) Example #2: Simple Car Spawn Script import GTAOrange.player as Player import GTAOrange.vehicle as Vehicle import GTAOrange.hash as Hash def onPlayerCommand(player, command): command = command.split() if command[0] == &quot;\/discord&quot;: x, y, z = player.getPosition() hash_ = Hash.Vehicle.getHashByString(&quot;Burrito&quot;) # the same as the constants # sanity check if hash_ is not None: vehicle = Vehicle.create(hash_, x, y, z, player.getHeading()) player.setIntoVeh(vehicle) else: print(' '.join(command)) return True Player.on(&quot;command&quot;, onPlayerCommand) Example #3: Object Spawning import GTAOrange.player as Player import GTAOrange.object as Object import GTAOrange.hash as Hash def onPlayerCommand(player, command): command = command.split() if command[0] == &quot;\/discord&quot;: x, y, z = player.getPosition() model = Hash.Object.getHashByString(&quot;stt_prop_ramp_adj_flip_m&quot;) # in this case, only this method works because the Object hash container doesn't load its entries as attributes if model is not None: object = Object.create(model, x, y, z) else: print(' '.join(command)) return True Hash.loadHashContainer(&quot;Object&quot;) Player.on(&quot;command&quot;, onPlayerCommand) Hash to String Probably usable for... Yeah, it's not that useful. Maybe you can use it for comparisons or something. import GTAOrange.hash as Hash my_vehicle = Hash.Vehicle.getStringByHash(1938952078) print(my_vehicle) # 'FireTruck'","tags":"","url":"Getting_Started\/Hash_Library.html"},{"title":"Using Global Interpreters","text":"The Python Module has its own CPython interpreter included. This is pretty neat for setting it up as fast as possible, but limits you because you've no way to proper use of community-written modules in Python. That's why it's possible to use any other CPython interpreter you've installed on your system. This tutorial is about how to set up such a thing. Installing a global Python interpreter &amp; using it for GTA Orange Windows Go to the official Python download page for Python 3.6. Scroll down to Files and download either x86 for 32bit systems or x86-64 for 64bit systems. Execute the installer and follow the instructions. Move or rename the python36.dll in your modules folder. Rename it in e.g. _python36.dll. Now the Python Module should load its Python interpreter from the globally installed one. Linux At the moment, there is no built-in Python interpreter for the Linux version. That's why you always have to use a system-wide installed Python interpreter. Just follow the installation steps for Linux, and you're ready to go.","tags":"","url":"Getting_Started\/Using_Global_Interpreters.html"},{"title":"Library Reference","text":"","tags":"","url":"Library_Reference\/index.html"},{"title":"player","text":"This is the reference to the player library. Global Functions: broadcast(msg, color) getByID(id) getByName(name) getAll() on(event, cb) trigger(event, *args) triggerClient(event, *args) Player Instance Methods: attachBlip(blip) distanceTo(x, y, z) getHeading() getID() getModel() getName() getPosition() getMoney() getHealth() giveWeapon(weapon, ammo) isInMarker(marker) removeWeapons() on(event, cb) sendNotification(msg) chatMsg(msg) setArmour(armour) setHeading(heading) setHealth(health) setName(name) setInfoMsg(msg) setIntoVeh(veh, seat) setModel(model) setPosition(x, y, z) setMoney(money) resetMoney() giveMoney(money) giveAmmo(weapon, ammo) broadcast(msg, color) disableHUD() enableHUD() trigger(event, *args) triggerClient(event, *args)","tags":"","url":"Library_Reference\/player\/index.html"},{"title":"broadcast","text":"Description: Broadcasts a message to all players. Reference: GTAOrange.player.broadcast(msg, color) Arguments: msg (string) - message string color (GTAOrange.color.Color) - message color Return value: Nothing. Usage: import GTAOrange.player as Player # broadcast a message to all players Player.broadcast(\"Hello World!\")","tags":"","url":"Library_Reference\/player\/broadcast.html"},{"title":"getAll","text":"Description: Returns dictionary with all player objects. WARNING! Can cause heavy load on some servers. If you can avoid using it, don't use it! Reference: GTAOrange.player.getAll() Arguments: Return value: dict - player dictionary Usage: import GTAOrange.player as Player # get all players players = Player.getAll() # do whatever you want with the players for id, player in players.items(): ...","tags":"","url":"Library_Reference\/player\/getAll.html"},{"title":"getByID","text":"Description: Returns player object by given id. Reference: GTAOrange.player.getByID(id) Arguments: id (int) - player id Return value: Player object Usage: import GTAOrange.player as Player # get player object of player with id 0 player = Player.getByID(0)","tags":"","url":"Library_Reference\/player\/getByID.html"},{"title":"getByName","text":"Description: Returns player object by its name. Reference: GTAOrange.player.getByName(name) Arguments: name (string) - player name Return value: Player object Usage: import GTAOrange.player as Player # get player object based on player's name player = Player.getByName(\"Jonniboy\") Be warned! At the moment, a user can change his name easily. Never connect information to a name only without validation!","tags":"","url":"Library_Reference\/player\/getByName.html"},{"title":"Instance","text":"This is the reference for instances\/objects generated by the Player class. Warning! Do not create an object of this class by yourself! Always use the create functions which can be found in the module, except for the player library (Player objects are created automatically). Player Instance Methods: attachBlip(blip) distanceTo(x, y, z) getHeading() getID() getModel() getName() getPosition() getMoney() getHealth() giveWeapon(weapon, ammo) isInMarker(marker) removeWeapons() on(event, cb) sendNotification(msg) chatMsg(msg) setArmour(armour) setHeading(heading) setHealth(health) setName(name) setInfoMsg(msg) setIntoVeh(veh, seat) setModel(model) setPosition(x, y, z) setMoney(money) resetMoney() giveMoney(money) giveAmmo(weapon, ammo) broadcast(msg, color) disableHUD() enableHUD() trigger(event, *args) triggerClient(event, *args)","tags":"","url":"Library_Reference\/player\/Instance\/index.html"},{"title":"attachBlip","text":"Description: Attaches the given blip to the player. Reference: obj.attachBlip(blip) Arguments: blip (GTAOrange.blip.blip) - blip object Return value: bool - True for success, False for failure {usage}","tags":"","url":"Library_Reference\/player\/Instance\/attachBlip.html"},{"title":"broadcast","text":"Description: Broadcasts a message to the player. Reference: obj.broadcast(msg, color) Arguments: msg (string) - message string color (GTAOrange.color.Color) - message color Return value: Nothing. Usage: import GTAOrange.player as Player # get a player object somehow player = Player.getByID(0) # broadcast a message to this player only player.broadcast(\"Hello World!\")","tags":"","url":"Library_Reference\/player\/Instance\/broadcast.html"},{"title":"chatMsg","text":"Description: Sends a chat message to the player. Reference: obj.chatMsg(msg) Arguments: msg (string) - message string Return value: Nothing. Usage: import GTAOrange.player as Player # get a player object somehow player = Player.getByID(0) # send a chat message to the player player.chatMsg(\"{ff00ff}Hello World!\") Useful info: As you can see, you can use RGB color codes in chat messages. Just wrap them with {...}. Only 6-character codes are possible.","tags":"","url":"Library_Reference\/player\/Instance\/chatMsg.html"},{"title":"disableHUD","text":"Description: Disables the HUD of the player. Reference: obj.disableHUD() Arguments: Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/player\/Instance\/disableHUD.html"},{"title":"distanceTo","text":"Description: Returns the distance from player to the given coordinates. Reference: obj.distanceTo(x, y, z) Arguments: x (float) - x-coord y (float) - y-coord z (float) - z-coord #optional Return value: float - distance between player and given coordinates Usage: import GTAOrange.player as Player # get a player object somehow player = Player.getByID(0) # get distance to map origin distance = player.distanceTo(0, 0, 0)","tags":"","url":"Library_Reference\/player\/Instance\/distanceTo.html"},{"title":"enableHUD","text":"Description: Enables the HUD of the player. Reference: obj.enableHUD() Arguments: Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/player\/Instance\/enableHUD.html"},{"title":"getHeading","text":"Description: Returns player heading. Reference: obj.getHeading() Arguments: Return value: float - player heading Usage: Creates vehicle faced to player with left door. import math import GTAOrange.player as Player import GTAOrange.vehicle as Vehicle # get a player object somehow player = Player.getByID(0) # get player heading (not in degree, radians!) h = player.getHeading() # get player position x, y, z = player.getPosition() Vehicle.create(\"Adder\", x - 3 * math.sin(h \/ 180 * math.pi), y + 3 * math.cos(h \/ 180 * math.pi), z + 0.1, h + 90)","tags":"","url":"Library_Reference\/player\/Instance\/getHeading.html"},{"title":"getHealth","text":"Description: Returns current health. Reference: obj.getHealth() Arguments: Return value: float - current health Usage: import GTAOrange.player as Player # get a player object somehow player = Player.getByID(0) # get player health health = player.getHealth() print(health)","tags":"","url":"Library_Reference\/player\/Instance\/getHealth.html"},{"title":"getID","text":"Description: Returns player id. Reference: obj.getID() Arguments: Return value: int - player id Usage: import GTAOrange.player as Player def onPlayerConnect(player, ip): print(player.getName() + \" joined with ID \" + player.getID()) # register for event Player.on(\"connect\", onPlayerConnect)","tags":"","url":"Library_Reference\/player\/Instance\/getID.html"},{"title":"getModel","text":"Description: Returns current model. Reference: obj.getModel() Arguments: Return value: int - model hash Usage: import GTAOrange.player as Player def onPlayerConnect(player, ip): print(player.getName() + \" joined with model \" + player.getModel()) # register for event Player.on(\"connect\", onPlayerConnect)","tags":"","url":"Library_Reference\/player\/Instance\/getModel.html"},{"title":"getMoney","text":"Description: Returns current money value the player is having. Reference: obj.getMoney() Arguments: Return value: int - money value {usage}","tags":"","url":"Library_Reference\/player\/Instance\/getMoney.html"},{"title":"getName","text":"Description: Returns current name. Reference: obj.getName() Arguments: Return value: string - current name Usage: import GTAOrange.player as Player def onPlayerConnect(player, ip): print(player.getName() + \" joined with ID \" + player.getID()) # register for event Player.on(\"connect\", onPlayerConnect)","tags":"","url":"Library_Reference\/player\/Instance\/getName.html"},{"title":"getPosition","text":"Description: Returns current position. Reference: obj.getPosition() Arguments: Return value: tuple - position tuple with 3 values Usage: Creates vehicle faced to player with left door. import math import GTAOrange.player as Player import GTAOrange.vehicle as Vehicle # get a player object somehow player = Player.getByID(0) # get player heading (not in degree, radians!) h = player.getHeading() # get player position x, y, z = player.getPosition() Vehicle.create(\"Adder\", x - 3 * math.sin(h \/ 180 * math.pi), y + 3 * math.cos(h \/ 180 * math.pi), z + 0.1, h + 90)","tags":"","url":"Library_Reference\/player\/Instance\/getPosition.html"},{"title":"giveAmmo","text":"Description: Gives ammo to player. Reference: obj.giveAmmo(weapon, ammo) Arguments: weapon (int) - weapon hash ammo (int) - ammo amount Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/player\/Instance\/giveAmmo.html"},{"title":"giveMoney","text":"Description: Gives specific amount of money (addition). Reference: obj.giveMoney(money) Arguments: money (int) - money value Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/player\/Instance\/giveMoney.html"},{"title":"giveWeapon","text":"Description: Gives weapon to player. Reference: obj.giveWeapon(weapon, ammo) Arguments: weapon (int) - weapon hash ammo (int) - ammo amount #optional Return value: Nothing. Usage: import math import GTAOrange.player as Player import GTAOrange.hash as Hash # get a player object somehow player = Player.getByID(0) # give player a pistol with 200 ammo player.giveWeapon(Hash.Weapons.WEAPON_PISTOL, 200)","tags":"","url":"Library_Reference\/player\/Instance\/giveWeapon.html"},{"title":"isInMarker","text":"Description: Checks if a player is in a marker. Reference: obj.isInMarker(marker) Arguments: marker (GTAOrange.marker.Marker) - marker Return value: bool - True for yes, False for no {usage}","tags":"","url":"Library_Reference\/player\/Instance\/isInMarker.html"},{"title":"on","text":"Description: Subscribes for an event only for this player. Reference: obj.on(event, cb) Arguments: event (string) - event name cb (function) - callback function Return value: Nothing. Usage: This will be called only when player with id 0 deads: import GTAOrange.player as Player def onAdminDeath(player, *args): ... # let's say, player with id 0 is an admin - get it with player lib player = Player.getByID(0) # register event handler for this specific player with id 0 # If this player dies, this event will be called. If other players die, it won't call! player.on(\"death\", onAdminDeath)","tags":"","url":"Library_Reference\/player\/Instance\/on.html"},{"title":"removeWeapons","text":"Description: Removes all weapons from a player. Reference: obj.removeWeapons() Arguments: Return value: Nothing. Usage: import GTAOrange.player as Player def onPlayerDeath(player, *args): player.removeWeapons() # register event handler Player.on(\"death\", onPlayerDeath)","tags":"","url":"Library_Reference\/player\/Instance\/removeWeapons.html"},{"title":"resetMoney","text":"Description: Resets money to zero. Reference: obj.resetMoney() Arguments: Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/player\/Instance\/resetMoney.html"},{"title":"sendNotification","text":"Description: Sends a notification to the player. Reference: obj.sendNotification(msg) Arguments: msg (string) - message string Return value: Nothing. Usage: import GTAOrange.player as Player def onPlayerDeath(player, *args): player.sendNotification(\"You died! Haha!\") # register event handler Player.on(\"death\", onPlayerDeath)","tags":"","url":"Library_Reference\/player\/Instance\/sendNotification.html"},{"title":"setArmour","text":"Description: Sets armour. Reference: obj.setArmour(armour) Arguments: armour (float) - armour value Return value: Nothing. Usage: import GTAOrange.player as Player def onPlayerConnect(player, ip): # set half armour player.setArmour(50.0) # register event handler Player.on(\"connect\", onPlayerConnect)","tags":"","url":"Library_Reference\/player\/Instance\/setArmour.html"},{"title":"setHeading","text":"Description: Sets heading (direction where the player is looking) Reference: obj.setHeading(heading) Arguments: heading (float) - heading Return value: Nothing. Usage: import GTAOrange.player as Player def onPlayerConnect(player, ip): player.setHeading(180) # register event handler Player.on(\"connect\", onPlayerConnect)","tags":"","url":"Library_Reference\/player\/Instance\/setHeading.html"},{"title":"setHealth","text":"Description: Sets health. Reference: obj.setHealth(health) Arguments: health (float) - health value Return value: Nothing. Usage: import GTAOrange.player as Player def onPlayerConnect(player, ip): # set half life 3 player.setArmour(50.0) # register event handler Player.on(\"connect\", onPlayerConnect)","tags":"","url":"Library_Reference\/player\/Instance\/setHealth.html"},{"title":"setInfoMsg","text":"Description: Sets info message for player. Reference: obj.setInfoMsg(msg) Arguments: msg (string) - message string #optional Return value: Nothing. Usage: import GTAOrange.player as Player def onPlayerConnect(player, ip): player.setInfoMsg(\"Please log in!\") # register event handler Player.on(\"connect\", onPlayerConnect)","tags":"","url":"Library_Reference\/player\/Instance\/setInfoMsg.html"},{"title":"setIntoVeh","text":"Description: Sets player into given vehicle. Reference: obj.setIntoVeh(veh, seat) Arguments: veh (GTAOrange.vehicle.Vehicle) - vehicle object seat (int) - seat number #optional Return value: Nothing. Usage: import GTAOrange.player as Player import GTAOrange.vehicle as Vehicle # get a player object somehow player = Player.getByID(0) # spawn a nice car vehicle = Vehicle.create(\"Adder\", -642, 522.68, 90, 0) # put player into vehicle seat player.setIntoVeh(vehicle)","tags":"","url":"Library_Reference\/player\/Instance\/setIntoVeh.html"},{"title":"setModel","text":"Description: Sets current model. Reference: obj.setModel(model) Arguments: model (int) - model hash Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/player\/Instance\/setModel.html"},{"title":"setMoney","text":"Description: Sets current money the player is having. Reference: obj.setMoney(money) Arguments: money (int) - money value Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/player\/Instance\/setMoney.html"},{"title":"setName","text":"Description: Sets current name. Reference: obj.setName(name) Arguments: name (string) - name string Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/player\/Instance\/setName.html"},{"title":"setPosition","text":"Description: Sets position. Reference: obj.setPosition(x, y, z) Arguments: x (float) - x-coord y (float) - y-coord z (float) - z-coord Return value: Nothing. Usage: import GTAOrange.player as Player def onPlayerConnect(player, ip): player.setPosition(0, 0, 70) # register event handler Player.on(\"connect\", onPlayerConnect)","tags":"","url":"Library_Reference\/player\/Instance\/setPosition.html"},{"title":"trigger","text":"Description: Triggers an event for the event handlers subscribing to this specific player. Reference: obj.trigger(event, *args) Arguments: event (string) - event name *args (*args) - arguments Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/player\/Instance\/trigger.html"},{"title":"triggerClient","text":"Description: Triggers a client event for the player. Reference: obj.triggerClient(event, *args) Arguments: event (string) - event name *args (*args) - arguments Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/player\/Instance\/triggerClient.html"},{"title":"on","text":"Description: Subscribes for an event for all players. Reference: GTAOrange.player.on(event, cb) Arguments: event (string) - event name cb (function) - callback function Return value: Nothing. Usage: import GTAOrange.player as Player # event handler for player connect event def myFunctionName(player, ip): ... # register for player event \"connect\" Player.on(\"connect\", myFunctionName)","tags":"","url":"Library_Reference\/player\/on.html"},{"title":"trigger","text":"Description: Triggers an event for all players. Reference: GTAOrange.player.trigger(event, *args) Arguments: event (string) - event name *args (*args) - arguments Return value: Nothing. Usage: import GTAOrange.player as Player import GTAOrange.blip as Blip # get a player somehow player = Player.getByID(0) # attach blip to player player.attachBlip(0.8, Blip.Color.BLUE, Blip.Sprite.STANDARD)","tags":"","url":"Library_Reference\/player\/trigger.html"},{"title":"triggerClient","text":"Description: Triggers a client event for all players. Reference: GTAOrange.player.triggerClient(event, *args) Arguments: event (string) - event name *args (*args) - arguments Return value: Nothing. Usage: import GTAOrange.player as Player # trigger event on the client side for EVERY player (see Instance for one player only) Player.triggerClient(\"myResource_myEvent\", param1, param2, param3)","tags":"","url":"Library_Reference\/player\/triggerClient.html"},{"title":"vehicle","text":"This is the reference to the vehicle library. Global Functions: create(model, x, y, z, h) deleteByID(id) getByID(id) getAll() on(event, cb) trigger(event, *args) Vehicle Instance Methods: attachBlip(name, scale, color, sprite) attachText(text, x, y, z, tcolor, ocolor, size) delete() distanceTo(x, y, z) equals(veh) getColors() getDriver() getEngineState() getID() getModel() getOccupants() getPassengers() getPosition() getRotation() getSirenState() getTyreBulletproofness() on(event, cb) setColors(color1, color2) setEngineState(state, locked) setPosition(x, y, z) setRotation(rx, ry, rz) setSirenState(state) setTyreBulletproofness(state) trigger(event, *args)","tags":"","url":"Library_Reference\/vehicle\/index.html"},{"title":"create","text":"Description: Creates a new vehicle. This is the right way to spawn a new vehicle. Reference: GTAOrange.vehicle.create(model, x, y, z, h) Arguments: model (str) - OR int model name OR hash x (float) - x-coord y (float) - y-coord z (float) - z-coord h (float) - heading Return value: Vehicle object {usage}","tags":"","url":"Library_Reference\/vehicle\/create.html"},{"title":"deleteByID","text":"Description: Deletes a vehicle object by the given id. Reference: GTAOrange.vehicle.deleteByID(id) Arguments: id (int) - vehicle id Return value: bool - True on success, False on failure {usage}","tags":"","url":"Library_Reference\/vehicle\/deleteByID.html"},{"title":"getAll","text":"Description: Returns dictionary with all vehicle objects. WARNING! Can cause heavy load on some servers. If you can avoid using it, don't use it! Reference: GTAOrange.vehicle.getAll() Arguments: Return value: dict - vehicle dictionary {usage}","tags":"","url":"Library_Reference\/vehicle\/getAll.html"},{"title":"getByID","text":"Description: Returns vehicle object by given id. Reference: GTAOrange.vehicle.getByID(id) Arguments: id (int) - vehicle id Return value: Vehicle object {usage}","tags":"","url":"Library_Reference\/vehicle\/getByID.html"},{"title":"Instance","text":"This is the reference for instances\/objects generated by the Vehicle class. Warning! Do not create an object of this class by yourself! Always use the create functions which can be found in the module, except for the player library (Player objects are created automatically). Vehicle Instance Methods: attachBlip(name, scale, color, sprite) attachText(text, x, y, z, tcolor, ocolor, size) delete() distanceTo(x, y, z) equals(veh) getColors() getDriver() getEngineState() getID() getModel() getOccupants() getPassengers() getPosition() getRotation() getSirenState() getTyreBulletproofness() on(event, cb) setColors(color1, color2) setEngineState(state, locked) setPosition(x, y, z) setRotation(rx, ry, rz) setSirenState(state) setTyreBulletproofness(state) trigger(event, *args)","tags":"","url":"Library_Reference\/vehicle\/Instance\/index.html"},{"title":"attachBlip","text":"Description: Creates and attaches a blip to the vehicle. Reference: obj.attachBlip(name, scale, color, sprite) Arguments: name (str) - blip name #optional scale (float) - blip scale #optional color (GTAOrange.blip.Color) - blip color (see blip library -&gt; classes at the eof) #optional sprite (GTAOrange.blip.Sprite) - blip sprite (see blip library -&gt; classes at the eof) #optional Return value: Blip object {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/attachBlip.html"},{"title":"attachText","text":"Description: Creates and attaches a 3d text to the vehicle. Reference: obj.attachText(text, x, y, z, tcolor, ocolor, size) Arguments: text (str) - text which will be added x (int) - x-coord #optional y (int) - y-coord #optional z (int) - z-coord #optional tcolor (int) - text color #optional ocolor (int) - outline color #optional size (int) - font size #optional Return value: Text object {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/attachText.html"},{"title":"delete","text":"Description: Deletes the vehicle. Reference: obj.delete() Arguments: Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/delete.html"},{"title":"distanceTo","text":"Description: Returns the distance from vehicle to the given coordinates. Reference: obj.distanceTo(x, y, z) Arguments: x (float) - x-coord y (float) - y-coord z (float) - z-coord #optional Return value: float - distance between vehicle and given coordinates {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/distanceTo.html"},{"title":"equals","text":"Description: Checks if given object IS this object. Reference: obj.equals(veh) Arguments: veh (GTAOrange.vehicle.Vehicle) - vehicle object Return value: bool - True if it is the object, False if it isn't the object {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/equals.html"},{"title":"getColors","text":"Description: Returns a tuple with the vehicle colors. Reference: obj.getColors() Arguments: Return value: tuple - color tuple with 2 GTAOrange.hash.VehicleColor objects {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/getColors.html"},{"title":"getDriver","text":"Description: Returns driver's player id. Reference: obj.getDriver() Arguments: Return value: int - OR None player id of driver (or None on failure) {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/getDriver.html"},{"title":"getEngineState","text":"Description: Returns vehicle engine state. Reference: obj.getEngineState() Arguments: Return value: bool - True for on, False for off {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/getEngineState.html"},{"title":"getID","text":"Description: Returns vehicle id. Reference: obj.getID() Arguments: Return value: int - vehicle id {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/getID.html"},{"title":"getModel","text":"Description: Returns model string. Reference: obj.getModel() Arguments: Return value: str - model string (e.g. &quot;Burrito&quot;) (returns None, when the vehicle wasn't created in Python!) {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/getModel.html"},{"title":"getOccupants","text":"Description: Returns a list of the occupants currently sitting in the vehicle, including the driver. Reference: obj.getOccupants() Arguments: Return value: list - list with all the passengers {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/getOccupants.html"},{"title":"getPassengers","text":"Description: Returns a list of passengers currently sitting in the vehicle, NOT including the driver (since passengers are defined as not taking any responsibility for the car, actually). Reference: obj.getPassengers() Arguments: Return value: list - list with all the passengers {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/getPassengers.html"},{"title":"getPosition","text":"Description: Returns current vehicle position. Reference: obj.getPosition() Arguments: Return value: tuple - position tuple with 3 float values {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/getPosition.html"},{"title":"getRotation","text":"Description: Returns current vehicle rotation. Reference: obj.getRotation() Arguments: Return value: tuple - rotation tuple with 3 float values {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/getRotation.html"},{"title":"getSirenState","text":"Description: Returns vehicle siren state. Reference: obj.getSirenState() Arguments: Return value: bool - True for on, False for off {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/getSirenState.html"},{"title":"getTyreBulletproofness","text":"Description: Checks if tyres are bulletproof or not. Reference: obj.getTyreBulletproofness() Arguments: Return value: bool - True for on, False for off {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/getTyreBulletproofness.html"},{"title":"on","text":"Description: Subscribes for an event only for this vehicle. Reference: obj.on(event, cb) Arguments: event (string) - event name cb (function) - callback function Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/on.html"},{"title":"setColors","text":"Description: Sets vehicle colors. Reference: obj.setColors(color1, color2) Arguments: color1 (GTAOrange.hash.VehicleColor) - first color color2 (GTAOrange.hash.VehicleColor) - second color Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/setColors.html"},{"title":"setEngineState","text":"Description: Toggles the vehicle engine on\/off. Reference: obj.setEngineState(state, locked) Arguments: state (bool) - True for on, False for off locked (bool) - True if the player shouldn't be able to turn it on again, False if not Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/setEngineState.html"},{"title":"setPosition","text":"Description: Sets position. Reference: obj.setPosition(x, y, z) Arguments: x (float) - x-coord y (float) - y-coord z (float) - z-coord Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/setPosition.html"},{"title":"setRotation","text":"Description: Sets rotation. Reference: obj.setRotation(rx, ry, rz) Arguments: rx (float) - rotation in x direction ry (float) - rotation in y direction rz (float) - rotation in z direction Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/setRotation.html"},{"title":"setSirenState","text":"Description: Toggles the vehicle siren on\/off. No problem if the vehicle hasn't got a siren, then nothing happens. Reference: obj.setSirenState(state) Arguments: state (bool) - True for on, False for off Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/setSirenState.html"},{"title":"setTyreBulletproofness","text":"Description: Toggles tyre bulletproof protection on\/off. Reference: obj.setTyreBulletproofness(state) Arguments: state (bool) - True for on, False for off Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/setTyreBulletproofness.html"},{"title":"trigger","text":"Description: Triggers an event for the event handlers subscribing to this specific vehicle. Reference: obj.trigger(event, *args) Arguments: event (string) - event name *args (*args) - arguments Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/vehicle\/Instance\/trigger.html"},{"title":"on","text":"Description: Subscribes for an event for all vehicles. Reference: GTAOrange.vehicle.on(event, cb) Arguments: event (string) - event name cb (function) - callback function Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/vehicle\/on.html"},{"title":"trigger","text":"Description: Triggers an event for all vehicles. Reference: GTAOrange.vehicle.trigger(event, *args) Arguments: event (string) - event name *args (*args) - arguments Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/vehicle\/trigger.html"},{"title":"marker","text":"This is the reference to the marker library. Global Functions: create(x, y, z, h, r, blip) deleteByID(id) getByID(id) getAll() on(event, cb) trigger(event, *args) Marker Instance Methods: delete() distanceTo(x, y, z) getID() getPosition() on(event, cb) trigger(event, *args)","tags":"","url":"Library_Reference\/marker\/index.html"},{"title":"create","text":"Description: Creates a new marker. This is the right way to spawn a new marker. Reference: GTAOrange.marker.create(x, y, z, h, r, blip) Arguments: x (float) - x-coord y (float) - y-coord z (float) - z-coord h (float) - marker height #optional r (float) - marker radius #optional blip (bool) - True if a blip should be created at the marker position, False if not #optional Return value: Marker object {usage}","tags":"","url":"Library_Reference\/marker\/create.html"},{"title":"deleteByID","text":"Description: Deletes a marker object by the given id. Reference: GTAOrange.marker.deleteByID(id) Arguments: id (int) - marker id Return value: bool - True on success, False on failure {usage}","tags":"","url":"Library_Reference\/marker\/deleteByID.html"},{"title":"getAll","text":"Description: Returns dictionary with all marker objects. WARNING! Can cause heavy load on some servers. If you can avoid using it, don't use it! Reference: GTAOrange.marker.getAll() Arguments: Return value: dict - marker dictionary {usage}","tags":"","url":"Library_Reference\/marker\/getAll.html"},{"title":"getByID","text":"Description: Returns marker object by given id. Reference: GTAOrange.marker.getByID(id) Arguments: id (int) - marker id Return value: Marker object {usage}","tags":"","url":"Library_Reference\/marker\/getByID.html"},{"title":"Instance","text":"This is the reference for instances\/objects generated by the Marker class. Warning! Do not create an object of this class by yourself! Always use the create functions which can be found in the module, except for the player library (Player objects are created automatically). Marker Instance Methods: delete() distanceTo(x, y, z) getID() getPosition() on(event, cb) trigger(event, *args)","tags":"","url":"Library_Reference\/marker\/Instance\/index.html"},{"title":"delete","text":"Description: Deletes the marker. Reference: obj.delete() Arguments: Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/marker\/Instance\/delete.html"},{"title":"distanceTo","text":"Description: Returns the distance from marker to the given coordinates. Reference: obj.distanceTo(x, y, z) Arguments: x (float) - x-coord y (float) - y-coord z (float) - z-coord #optional Return value: float - distance between marker and given coordinates {usage}","tags":"","url":"Library_Reference\/marker\/Instance\/distanceTo.html"},{"title":"getID","text":"Description: Returns marker id. Reference: obj.getID() Arguments: Return value: int - marker id {usage}","tags":"","url":"Library_Reference\/marker\/Instance\/getID.html"},{"title":"getPosition","text":"Description: Returns current marker position. Reference: obj.getPosition() Arguments: Return value: tuple - position tuple with 3 values {usage}","tags":"","url":"Library_Reference\/marker\/Instance\/getPosition.html"},{"title":"on","text":"Description: Subscribes for an event only for this marker. Reference: obj.on(event, cb) Arguments: event (string) - event name cb (function) - callback function Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/marker\/Instance\/on.html"},{"title":"trigger","text":"Description: Triggers an event for the event handlers subscribing to this specific marker. Reference: obj.trigger(event, *args) Arguments: event (string) - event name *args (*args) - arguments Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/marker\/Instance\/trigger.html"},{"title":"on","text":"Description: Subscribes for an event for all markers. Reference: GTAOrange.marker.on(event, cb) Arguments: event (string) - event name cb (function) - callback function Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/marker\/on.html"},{"title":"trigger","text":"Description: Triggers an event for all markers. Reference: GTAOrange.marker.trigger(event, *args) Arguments: event (string) - event name *args (*args) - arguments Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/marker\/trigger.html"},{"title":"object","text":"This is the reference to the object library. Global Functions: create(model, x, y, z, pitch, yaw, roll) deleteByID(id) getByID(id) getAll() on(event, cb) trigger(event, *args) Object Instance Methods: delete() getID() equals(obj)","tags":"","url":"Library_Reference\/object\/index.html"},{"title":"create","text":"Description: Creates a new object. This is the right way to spawn a new object. Reference: GTAOrange.object.create(model, x, y, z, pitch, yaw, roll) Arguments: model (str) - OR int model name OR hash x (float) - x-coord y (float) - y-coord z (float) - z-coord pitch (float) - pitch angle (y rotation) #optional yaw (float) - yaw angle (z rotation, heading) #optional roll (float) - roll angle (x rotation) #optional Return value: Object object {usage}","tags":"","url":"Library_Reference\/object\/create.html"},{"title":"deleteByID","text":"Description: Deletes a object object by the given id. Reference: GTAOrange.object.deleteByID(id) Arguments: id (int) - object id Return value: bool - True on success, False on failure {usage}","tags":"","url":"Library_Reference\/object\/deleteByID.html"},{"title":"getAll","text":"Description: Returns dictionary with all object objects. WARNING! Can cause heavy load on some servers. If you can avoid using it, don't use it! Reference: GTAOrange.object.getAll() Arguments: Return value: dict - object dictionary {usage}","tags":"","url":"Library_Reference\/object\/getAll.html"},{"title":"getByID","text":"Description: Returns object object by given id. Reference: GTAOrange.object.getByID(id) Arguments: id (int) - object id Return value: Object object {usage}","tags":"","url":"Library_Reference\/object\/getByID.html"},{"title":"Instance","text":"This is the reference for instances\/objects generated by the Object class. Warning! Do not create an object of this class by yourself! Always use the create functions which can be found in the module, except for the player library (Player objects are created automatically). Object Instance Methods: delete() getID() equals(obj)","tags":"","url":"Library_Reference\/object\/Instance\/index.html"},{"title":"delete","text":"Description: Deletes the object. Reference: obj.delete() Arguments: Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/object\/Instance\/delete.html"},{"title":"equals","text":"Description: Checks if given object IS this object. Reference: obj.equals(obj) Arguments: obj (GTAOrange.object.Object) - object object Return value: bool - True if it is the object, False if it isn't the object {usage}","tags":"","url":"Library_Reference\/object\/Instance\/equals.html"},{"title":"getID","text":"Description: Returns object id. Reference: obj.getID() Arguments: Return value: int - object id {usage}","tags":"","url":"Library_Reference\/object\/Instance\/getID.html"},{"title":"on","text":"Description: Subscribes for an event for all markers. Reference: GTAOrange.object.on(event, cb) Arguments: event (string) - event name cb (function) - callback function Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/object\/on.html"},{"title":"trigger","text":"Description: Triggers an event for all markers. Reference: GTAOrange.object.trigger(event, *args) Arguments: event (string) - event name *args (*args) - arguments Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/object\/trigger.html"},{"title":"blip","text":"This is the reference to the blip library. Global Functions: create(name, x, y, z, scale, color, sprite) createBlipForAll(name, x, y, z, scale, color, sprite) createBlipForPlayerOnly(name, player, x, y, z, scale, color, sprite) deleteByID(id) getByID(id) getAll() on(event, cb) trigger(event, *args) Blip Instance Methods: attachTo(dest) delete() distanceTo(x, y, z) getID() getPosition() setColor() setRoute(route) setScale(scale) setSprite(sprite) setShortRange(toggle)","tags":"","url":"Library_Reference\/blip\/index.html"},{"title":"create","text":"Description: Creates a new blip which every player can see. This is the right way to spawn a new blip. Shortcut for GTAOrange.player.createBlipForAll(...). Reference: GTAOrange.blip.create(name, x, y, z, scale, color, sprite) Arguments: name (string) - name (displayed in the map legend) x (float) - x-coord of blip #optional y (float) - y-coord of blip #optional z (float) - z-coord of blip #optional scale (float) - blip scale #optional color (GTAOrange.blip.Color) - blip color #optional sprite (GTAOrange.blip.Sprite) - blip sprite (texture, icon) #optional Return value: Blip object {usage}","tags":"","url":"Library_Reference\/blip\/create.html"},{"title":"createBlipForAll","text":"Description: Creates a new blip which every player can see. This is the right way to spawn a new blip. Reference: GTAOrange.blip.createBlipForAll(name, x, y, z, scale, color, sprite) Arguments: name (string) - name (displayed in the map legend) x (float) - x-coord of blip #optional y (float) - y-coord of blip #optional z (float) - z-coord of blip #optional scale (float) - blip scale #optional color (GTAOrange.blip.Color) - blip color #optional sprite (GTAOrange.blip.Sprite) - blip sprite (texture, icon) #optional Return value: Blip object {usage}","tags":"","url":"Library_Reference\/blip\/createBlipForAll.html"},{"title":"createBlipForPlayerOnly","text":"Description: Creates a new blip which only the specified player can see. This is the right way to spawn a new blip. Reference: GTAOrange.blip.createBlipForPlayerOnly(name, player, x, y, z, scale, color, sprite) Arguments: name (string) - name (displayed in the map legend) player (GTAOrange.player.Player) - player object of player who is able to see it #optional x (float) - x-coord of blip #optional y (float) - y-coord of blip #optional z (float) - z-coord of blip #optional scale (float) - blip scale #optional color (GTAOrange.blip.Color) - blip color #optional sprite (GTAOrange.blip.Sprite) - blip sprite (texture, icon) #optional Return value: Blip object {usage}","tags":"","url":"Library_Reference\/blip\/createBlipForPlayerOnly.html"},{"title":"deleteByID","text":"Description: Deletes a blip object by the given id. Reference: GTAOrange.blip.deleteByID(id) Arguments: id (int) - blip id Return value: bool - True on success, False on failure {usage}","tags":"","url":"Library_Reference\/blip\/deleteByID.html"},{"title":"getAll","text":"Description: Returns dictionary with all blip objects. WARNING! Can cause heavy load on some servers. If you can avoid using it, don't use it! Reference: GTAOrange.blip.getAll() Arguments: Return value: dict - blip dictionary {usage}","tags":"","url":"Library_Reference\/blip\/getAll.html"},{"title":"getByID","text":"Description: Returns blip object by given id. Reference: GTAOrange.blip.getByID(id) Arguments: id (int) - blip id Return value: bool - True on success, False on failure {usage}","tags":"","url":"Library_Reference\/blip\/getByID.html"},{"title":"Instance","text":"This is the reference for instances\/objects generated by the Blip class. Warning! Do not create an object of this class by yourself! Always use the create functions which can be found in the module, except for the player library (Player objects are created automatically). Blip Instance Methods: attachTo(dest) delete() distanceTo(x, y, z) getID() getPosition() setColor() setRoute(route) setScale(scale) setSprite(sprite) setShortRange(toggle)","tags":"","url":"Library_Reference\/blip\/Instance\/index.html"},{"title":"attachTo","text":"Description: Attaches the blip to the vehicle represented by the given vehicle object, or to the player represented by the given player object. Reference: obj.attachTo(dest) Arguments: dest (GTAOrange.player.Player) - OR GTAOrange.vehicle.Vehicle player or vehicle object Return value: bool - True for success, False for failure {usage}","tags":"","url":"Library_Reference\/blip\/Instance\/attachTo.html"},{"title":"delete","text":"Description: Deletes the blip. Reference: obj.delete() Arguments: Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/blip\/Instance\/delete.html"},{"title":"distanceTo","text":"Description: Returns the distance from the blip to the given coordinates. Reference: obj.distanceTo(x, y, z) Arguments: x (float) - x-coord y (float) - y-coord z (float) - z-coord #optional Return value: float - distance between blip and given coordinates {usage}","tags":"","url":"Library_Reference\/blip\/Instance\/distanceTo.html"},{"title":"getID","text":"Description: Returns blip id. Reference: obj.getID() Arguments: Return value: int - blip id {usage}","tags":"","url":"Library_Reference\/blip\/Instance\/getID.html"},{"title":"getPosition","text":"Description: Returns current position. Reference: obj.getPosition() Arguments: Return value: tuple - position tuple with 3 values {usage}","tags":"","url":"Library_Reference\/blip\/Instance\/getPosition.html"},{"title":"setColor","text":"Description: Sets color of the blip. Reference: obj.setColor() Arguments: Return value: color - GTAOrange.blip.Color blip color {usage}","tags":"","url":"Library_Reference\/blip\/Instance\/setColor.html"},{"title":"setRoute","text":"Description: Enables\/disables routing to blip. Reference: obj.setRoute(route) Arguments: route (bool) - True for routing, False for not Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/blip\/Instance\/setRoute.html"},{"title":"setScale","text":"Description: Sets scale of blip. Reference: obj.setScale(scale) Arguments: scale (float) - blip scale Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/blip\/Instance\/setScale.html"},{"title":"setShortRange","text":"Description: Sets that blip can be seen only on the short distance. Reference: obj.setShortRange(toggle) Arguments: toggle (bool) - True for yes, False for no Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/blip\/Instance\/setShortRange.html"},{"title":"setSprite","text":"Description: Sets sprite (texture, icon) of blip. Reference: obj.setSprite(sprite) Arguments: sprite (GTAOrange.blip.Sprite) - blip sprite Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/blip\/Instance\/setSprite.html"},{"title":"on","text":"Description: Subscribes for an event for all markers. Reference: GTAOrange.blip.on(event, cb) Arguments: event (string) - event name cb (function) - callback function Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/blip\/on.html"},{"title":"trigger","text":"Description: Triggers an event for all markers. Reference: GTAOrange.blip.trigger(event, *args) Arguments: event (string) - event name *args (*args) - arguments Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/blip\/trigger.html"},{"title":"text","text":"This is the reference to the text library. Global Functions: create(text, x, y, z, tcolor, ocolor, size) deleteByID(id) getByID(id) getAll() on(event, cb) trigger(event, *args) Text Instance Methods: delete() getID() getPosition() getColors() getSize() getText()","tags":"","url":"Library_Reference\/text\/index.html"},{"title":"create","text":"Description: Creates a new 3d text. This is the right way to spawn a new text. Reference: GTAOrange.text.create(text, x, y, z, tcolor, ocolor, size) Arguments: text (str) - message string x (float) - x-coord y (float) - y-coord z (float) - z-coord tcolor (GTAOrange.color.Color) - text color #optional ocolor (GTAOrange.color.Color) - outline color #optional size (float) - font size #optional Return value: Text object {usage}","tags":"","url":"Library_Reference\/text\/create.html"},{"title":"deleteByID","text":"Description: Deletes a text object by the given id. Reference: GTAOrange.text.deleteByID(id) Arguments: id (int) - text id Return value: bool - True on success, False on failure {usage}","tags":"","url":"Library_Reference\/text\/deleteByID.html"},{"title":"getAll","text":"Description: Returns dictionary with all text objects. WARNING! Can cause heavy load on some servers. If you can avoid using it, don't use it! Reference: GTAOrange.text.getAll() Arguments: Return value: dict - text dictionary {usage}","tags":"","url":"Library_Reference\/text\/getAll.html"},{"title":"getByID","text":"Description: Returns text object by given id. Reference: GTAOrange.text.getByID(id) Arguments: id (int) - text id Return value: Text object {usage}","tags":"","url":"Library_Reference\/text\/getByID.html"},{"title":"Instance","text":"This is the reference for instances\/objects generated by the Text class. Warning! Do not create an object of this class by yourself! Always use the create functions which can be found in the module, except for the player library (Player objects are created automatically). Text Instance Methods: delete() getID() getPosition() getColors() getSize() getText()","tags":"","url":"Library_Reference\/text\/Instance\/index.html"},{"title":"delete","text":"Description: Deletes the text. Reference: obj.delete() Arguments: Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/text\/Instance\/delete.html"},{"title":"getColors","text":"Description: Returns current colors. Reference: obj.getColors() Arguments: Return value: tuple - two elements, first is text color, second is outline color {usage}","tags":"","url":"Library_Reference\/text\/Instance\/getColors.html"},{"title":"getID","text":"Description: Returns text id. Reference: obj.getID() Arguments: Return value: int - text id {usage}","tags":"","url":"Library_Reference\/text\/Instance\/getID.html"},{"title":"getPosition","text":"Description: Returns current position. Reference: obj.getPosition() Arguments: Return value: tuple - position tuple with 3 values {usage}","tags":"","url":"Library_Reference\/text\/Instance\/getPosition.html"},{"title":"getSize","text":"Description: Returns current size. Reference: obj.getSize() Arguments: Return value: float - size {usage}","tags":"","url":"Library_Reference\/text\/Instance\/getSize.html"},{"title":"getText","text":"Description: Returns current text. Reference: obj.getText() Arguments: Return value: str - message string {usage}","tags":"","url":"Library_Reference\/text\/Instance\/getText.html"},{"title":"on","text":"Description: Subscribes for an event for all markers. Reference: GTAOrange.text.on(event, cb) Arguments: event (string) - event name cb (function) - callback function Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/text\/on.html"},{"title":"trigger","text":"Description: Triggers an event for all markers. Reference: GTAOrange.text.trigger(event, *args) Arguments: event (string) - event name *args (*args) - arguments Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/text\/trigger.html"},{"title":"server","text":"This is the reference to the server library. Global Functions: on(event, cb) trigger(event, *args)","tags":"","url":"Library_Reference\/server\/index.html"},{"title":"on","text":"Description: Subscribes for an event. Reference: GTAOrange.server.on(event, cb) Arguments: event (string) - event name cb (function) - callback function Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/server\/on.html"},{"title":"trigger","text":"Description: Triggers an event. Reference: GTAOrange.server.trigger(event, *args) Arguments: event (string) - event name *args (*args) - arguments Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/server\/trigger.html"},{"title":"debug","text":"This is the reference to the debug library. Global Functions: dump(obj, magic)","tags":"","url":"Library_Reference\/debug\/index.html"},{"title":"dump","text":"Description: Dumps every attribute of an object to the console. Reference: GTAOrange.debug.dump(obj, magic) Arguments: obj (any) - object object you want to dump magic (bool) - True if you want to output &quot;magic&quot; attributes (like init, ...) #optional Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/debug\/dump.html"},{"title":"event","text":"This is the reference to the event library. Global Functions: Event Instance Methods: getCallback() cancel()","tags":"","url":"Library_Reference\/event\/index.html"},{"title":"Instance","text":"This is the reference for instances\/objects generated by the Event class. Warning! Do not create an object of this class by yourself! Always use the create functions which can be found in the module, except for the player library (Player objects are created automatically). Event Instance Methods: getCallback() cancel()","tags":"","url":"Library_Reference\/event\/Instance\/index.html"},{"title":"cancel","text":"Description: Cancels an event. Reference: obj.cancel() Arguments: Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/event\/Instance\/cancel.html"},{"title":"getCallback","text":"Description: Returns callback function. Reference: obj.getCallback() Arguments: Return value: function - callback function {usage}","tags":"","url":"Library_Reference\/event\/Instance\/getCallback.html"},{"title":"hash","text":"This is the reference to the hash library. Global Functions: loadHashContainer()","tags":"","url":"Library_Reference\/hash\/index.html"},{"title":"loadHashContainer","text":"Description: Reference: GTAOrange.hash.loadHashContainer() Arguments: Return value: Nothing. {usage}","tags":"","url":"Library_Reference\/hash\/loadHashContainer.html"},{"title":"world","text":"This is the reference to the world library. Global Functions: getDistance(x1, y1, z1, x2, y2, z2)","tags":"","url":"Library_Reference\/world\/index.html"},{"title":"getDistance","text":"Description: Returns the distance between two points, either 3-dimensional ones or 2-dimensional ones. Please use the components of them in a row as parameters. For example, if you've 2d points: A(10|20), B(30|40) getDistance(10, 20, 30, 40) And if you've 3d points: C(50|60|70), D(80|90|100) getDistance(50, 60, 70, 80, 90, 100) Reference: GTAOrange.world.getDistance(x1, y1, z1, x2, y2, z2) Arguments: x1 (float) - x-coord of first point y1 (float) - y-coord of first point z1 (float) - z-coord of first point x2 (float) - x-coord of second point y2 (float) - y-coord of second point #optional z2 (float) - z-coord of second point #optional Return value: float - distance between given points {usage}","tags":"","url":"Library_Reference\/world\/getDistance.html"},{"title":"Event Reference","text":"This is a reference which shows you all the existing events to which you can subscribe in your Python resource. Player library events Vehicle library events Marker library events","tags":"","url":"Event_Reference\/index.html"},{"title":"player","text":"Subscribable built-in events Player.on(&quot;connect&quot;, myFunc) Called when a player connects to the server. Passed arguments: player (GTAOrange.player.Player) ip (string) - contains player's IP Player.on(&quot;disconnect&quot;, myFunc) Called when a player disconnects. Passed arguments: player (GTAOrange.player.Player) reason (int) - &quot;reason&quot; for a disconnect, 1 stands for normal disconnect and 2 means the connection is lost (timeout) Player.on(&quot;command&quot;, myFunc) Called when a player sends a chat command. Passed arguments: player (GTAOrange.player.Player) arguments (list) - contains all parts of the command splitted by &quot; &quot;, e.g. list(&quot;\/test&quot;, &quot;0&quot;, &quot;0&quot;, &quot;70&quot;) import GTAOrange.player.Player def onPlayerCommand(player, command): command = command.split() if command[0] == &quot;\/setpos&quot;: # ... elif command[0] == &quot;\/players&quot;: # ... Player.on(&quot;command&quot;, onPlayerCommand) Player.on(&quot;death&quot;, myFunc) Called when a player dies on the server. Passed arguments: player (GTAOrange.player.Player) killer (GTAOrange.player.Player) hash (int OR None) - weapon hash or None Player.on(&quot;spawn&quot;, myFunc) Called when a player spawns. This is the right time to set the spawn position. Passed arguments: player (GTAOrange.player.Player) position (tuple) Player.on(&quot;pressedkey&quot;, myFunc) Called when a player pressed a key on his keyboard. See the hash library, there you will find a prepared class to compare with. Passed arguments: player (GTAOrange.player.Player) key_id (int, GTAOrange.hash.Key) import GTAOrange.player as Player import GTAOrange.hash.Hash as Key def onPlayerPressedKey(player, key_id): if key_id == Key.F11: # ... Player.on(&quot;pressedkey&quot;, onPlayerPressedKey) Player.on(&quot;clientevent&quot;, myFunc) Called when a client triggers an event on the server. See Client Server Communication for more information. Passed arguments: player (GTAOrange.player.Player) event_name (string) *args (*args) Subscribable inherited events from other libraries Player.on(&quot;enteredvehicle&quot;, myFunc) Called when a player enters a vehicle. Passed arguments: player (GTAOrange.player.Player) vehicle (GTAOrange.vehicle.Vehicle) Player.on(&quot;leftvehicle&quot;, myFunc) Called when a player leaves a vehicle. Passed arguments: player (GTAOrange.player.Player) vehicle (GTAOrange.vehicle.Vehicle) Player.on(&quot;enteredmarker&quot;, myFunc) Called when a player enters a marker. Passed arguments: player (GTAOrange.player.Player) marker (GTAOrange.marker.Marker) Player.on(&quot;leftmarker&quot;, myFunc) Called when a player leaves a marker. Passed arguments: player (GTAOrange.player.Player) marker (GTAOrange.marker.Marker)","tags":"","url":"Event_Reference\/player.html"},{"title":"vehicle","text":"Subscribable built-in events Vehicle.on(&quot;playerentered&quot;, myFunc) Called when a player enters a vehicle. Passed arguments: vehicle (GTAOrange.vehicle.Vehicle) player (GTAOrange.player.Player) Vehicle.on(&quot;playerleft&quot;, myFunc) Called when a player leaves a vehicle. Passed arguments: vehicle (GTAOrange.vehicle.Vehicle) player (GTAOrange.player.Player) Subscribable inherited events from other libraries Vehicle.on(&quot;enteredmarker&quot;, myFunc) Called when a vehicle enters a marker. Passed arguments: vehicle (GTAOrange.vehicle.Vehicle) marker (GTAOrange.marker.Marker) Vehicle.on(&quot;leftmarker&quot;, myFunc) Called when a vehicle leaves a marker. Passed arguments: vehicle (GTAOrange.vehicle.Vehicle) marker (GTAOrange.marker.Marker)","tags":"","url":"Event_Reference\/vehicle.html"},{"title":"marker","text":"Subscribable built-in events Marker.on(&quot;playerentered&quot;, myFunc) Called when a player enters a marker. Passed arguments: marker (GTAOrange.marker.Marker) player (GTAOrange.player.Player) Marker.on(&quot;playerleft&quot;, myFunc) Called when a player leaves a marker. Passed arguments: marker (GTAOrange.marker.Marker) player (GTAOrange.player.Player) Marker.on(&quot;vehicleentered&quot;, myFunc) Called when a vehicle leaves a marker. Passed arguments: marker (GTAOrange.marker.Marker) vehicle (GTAOrange.vehicle.Vehicle) Marker.on(&quot;vehicleleft&quot;, myFunc) Called when a vehicle leaves a marker. Passed arguments: marker (GTAOrange.marker.Marker) vehicle (GTAOrange.vehicle.Vehicle)","tags":"","url":"Event_Reference\/marker.html"}]}